This walkthrough shows how to create a traditional Windows desktop application in Visual Studio. 
The example application you'll create uses the Windows API to display "Hello, Windows desktop!" in a window. 
You can use the code that you develop in this walkthrough as a pattern to create other Windows desktop applications. 
The Windows API (also known as the Win32 API, Windows Desktop API, and Windows Classic API) is a C-language-based framework for creating Windows applications. 
It has been in existence since the 1980s and has been used to create Windows applications for decades. 
More advanced and easier-to-program frameworks have been built on top of the Windows API. 
For example, MFC, ATL, the .NET frameworks. 
Even the most modern Windows Runtime code for UWP and Store apps written in C++/WinRT uses the Windows API underneath. 
For more information about the Windows API, see Windows API Index. There are many ways to create Windows applications, but the process above was the first.
Follow these steps to create your first Windows desktop project. 
As you go, you'll enter the code for a working Windows desktop application. 
To see the documentation for your preferred version of Visual Studio, use the Version selector control. 
It's found at the top of the table of contents on this page.
Just as every C application and C++ application must have a main function as its starting point.
Along with the WinMain function, every Windows desktop application must also have a window-procedure function. 
This function is typically named WndProc, but you can name it whatever you like. WndProc has the following syntax.
In this function, you write code to handle messages that the application receives from Windows when events occur. 
For example, if a user chooses an OK button in your application, Windows will send a message to you and you can write code inside your WndProc function. 
It's called handling an event. You only handle the events that are relevant for your application.
This function returns an HWND, which is a handle to a window. 
A handle is somewhat like a pointer that Windows uses to keep track of open windows. 
For more information, see Windows Data Types.
The displayed window doesn't have much content because you haven't yet implemented the WndProc function. 
In other words, the application isn't yet handling the messages that Windows is now sending to it.